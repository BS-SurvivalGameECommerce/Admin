{"remainingRequest":"C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\BuildSchoolLab\\MVC III\\Admin\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\BuildSchoolLab\\MVC III\\Admin\\src\\App.vue","mtime":1600012250088},{"path":"C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600009700951},{"path":"C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1600009716616},{"path":"C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600009700951},{"path":"C:\\BuildSchoolLab\\MVC III\\Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1600009716613}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}